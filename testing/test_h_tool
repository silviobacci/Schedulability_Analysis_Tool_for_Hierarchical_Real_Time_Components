#!/usr/bin/env sh

PROJECT_FOLDER="../"
OUTPUT_FOLDER="test_h_results"
TASKSET_FOLDER="$PROJECT_FOLDER/testing/taskset_auto_generated"
SERVER_FOUND="The periodic server has the following paramters:"
BUDGET="	 Qs = "
PERIOD="	 Ts = "
UTILIZATION="The utilization of the taskset is 0"
ALL="$OUTPUT_FOLDER/test_h.txt"
FP="$OUTPUT_FOLDER/test_h_fp.txt"
RM="$OUTPUT_FOLDER/test_h_rm.txt"
DM="$OUTPUT_FOLDER/test_h_dm.txt"
EDF="$OUTPUT_FOLDER/test_h_edf.txt"	

START_U=0.4
END_U=0.9
STEP_U=0.1
START_TN=4
END_TN=8
STEP_TN=2
SCHEDULING_ALGORITHMS=4
N_TEST=10
TASKSET_NUMBER=1

task_generator() {
	U_REAL=0
	FOUND=0
	for TN in $(seq $1 $2 $3); do
		INDEX=$((($TN - $1) / $2))
		for T in $(seq $(($N_TEST * $INDEX + 1)) $(($N_TEST * ($INDEX + 1)))); do
			./$PROJECT_FOLDER/testing/taskgen $TN $4 $T >/dev/null
			RESULT=$(run_tool $TASKSET_FOLDER/ts_$T.txt 0)
			if $(is_contained "$RESULT" "$UTILIZATION"); then
				U_RESULT=$(get_value "$RESULT" "$UTILIZATION")
				U_TMP=${U_RESULT#"$UTILIZATION"}
				U_REAL=$(float_operation "$U_REAL+$U_TMP")
				FOUND=$(($FOUND + 1))
			fi
		done
	done
	
	U_REAL=$(float_operation "$U_REAL/$FOUND")
}

run_tool() {
	echo "$1 $2"
	./$PROJECT_FOLDER/bin/find_ps_analysis $1 $2
}

is_contained() {
	echo "$1" | grep -q "$2"
}

get_value() {
	echo "$1" | grep "$2"
}

float_operation() {
	echo "scale=2; $1" | bc
}

test_scheduling_algorithms() {
	FILENAME=$ALL
	for U in $(seq $START_U $STEP_U $END_U); do
		task_generator 5 5 5 $U
		printf "%s" "$U_REAL" >> $FILENAME
		for S in $(seq 0 $(($SCHEDULING_ALGORITHMS - 1))); do	
			echo "U = $U_REAL, ALGORITHM = $S"
			B=0
			FOUND=0
			for T in $(seq 1 $N_TEST); do
				RESULT=$(run_tool $TASKSET_FOLDER/ts_$T.txt $S)
				if $(is_contained "$RESULT" "$SERVER_FOUND"); then
					Q_RESULT=$(get_value "$RESULT" "$BUDGET")
					P_RESULT=$(get_value "$RESULT" "$PERIOD")
					Q=${Q_RESULT#"$BUDGET"}
			  		P=${P_RESULT#"$PERIOD"}
			  		B=$(float_operation "$B+$Q/$P")
			  		FOUND=$(($FOUND + 1))
				fi
			done
		
			if [ $FOUND != 0 ]; then
				B=$(float_operation "$B/$FOUND")
			else
				B=0
			fi
			printf "\t%s" "$B" >> $FILENAME
		done 
		printf "\n" >> $FILENAME
	done
}

test_task_number() {
	for S in $(seq 0 $(($SCHEDULING_ALGORITHMS - 1))); do	
		case "$S" in
			"0")
				FILENAME=$FP
				;;
			"1")
				FILENAME=$RM
				;;
			"2")
				FILENAME=$DM
				;;
			"3")
				FILENAME=$EDF
				;;
		esac
		for U in $(seq $START_U $STEP_U $END_U); do
			task_generator $START_TN $STEP_TN $END_TN $U
			printf "%s" "$U_REAL" >> $FILENAME
			for TN in $(seq $START_TN $STEP_TN $END_TN); do
				echo "ALGORITHM = $S, U = $U_REAL, # TASKS = $TN"
				B=0
				FOUND=0
				INDEX=$((($TN - $START_TN) / $STEP_TN))
				for T in $(seq $(($N_TEST * $INDEX + 1)) $(($N_TEST * ($INDEX + 1)))); do
					RESULT=$(run_tool $TASKSET_FOLDER/ts_$T.txt $S)
					if $(is_contained "$RESULT" "$SERVER_FOUND"); then
						Q_RESULT=$(get_value "$RESULT" "$BUDGET")
						P_RESULT=$(get_value "$RESULT" "$PERIOD")
						Q=${Q_RESULT#"$BUDGET"}
				  		P=${P_RESULT#"$PERIOD"}
				  		B=$(float_operation "$B+$Q/$P")
				  		FOUND=$(($FOUND + 1))
					fi
				done
		
				if [ $FOUND != 0 ]; then
					B=$(float_operation "$B/$FOUND")
				else
					B=0
				fi
				printf "\t%s" "$B" >> $FILENAME
			done 
			printf "\n" >> $FILENAME
		done
	done
}

main() {
	rm $OUTPUT_FOLDER/*
	test_scheduling_algorithms
	test_task_number
	cat "$PROJECT_FOLDER/testing/test_h_gnuplot.conf" | gnuplot
}

main
